{"ast":null,"code":"var _jsxFileName = \"/home/gean/Documentos/Personal_Projects/todolist/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport * as C from './App.styles';\nimport { ListItem } from './components/ListItem';\nimport { AddArea } from './components/AddArea';\nimport { Menu } from './components/Menu';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [list, setList] = useState([]);\n\n  const handleAddTask = taskName => {\n    if (list.length === 0) {\n      setList([{\n        id: 1,\n        name: taskName,\n        done: false,\n        selectd: false\n      }]);\n    } else {\n      let newList = [...list];\n      newList.push({\n        id: list[list.length - 1].id + 1,\n        name: taskName,\n        done: false,\n        selectd: false\n      });\n      setList(newList);\n    }\n  };\n\n  const hendleChecked = (taskChecked, taskId) => {\n    let newList = list.map(task => {\n      if (task.id !== taskId) return task;\n      task.done = taskChecked;\n      return task;\n    });\n    setList(newList);\n  };\n\n  const hendleClick = (taskSelected, taskId) => {\n    let newList = list.map(task => {\n      if (task.id !== taskId) {\n        task.selectd = false;\n        return task;\n      }\n\n      task.selectd = taskSelected;\n      return task;\n    });\n    setList(newList);\n  };\n\n  const handleRemove = () => {\n    let newList = list.filter(task => task.selectd !== true);\n    setList(newList);\n  };\n\n  const handleRemoveAllDone = () => {\n    let newList = list.filter(task => task.done !== true);\n    setList(newList);\n  };\n\n  const clearAll = () => {\n    setList([]);\n  };\n\n  const handleButtons = {\n    handleRemove,\n    handleRemoveAllDone,\n    clearAll\n  };\n  return /*#__PURE__*/_jsxDEV(C.Container, {\n    children: [/*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(C.Area, {\n        children: [/*#__PURE__*/_jsxDEV(C.Header, {\n          children: \"Lista de tarefas\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(AddArea, {\n          onEnter: handleAddTask\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this), list.map((item, index) => /*#__PURE__*/_jsxDEV(ListItem, {\n          item: item,\n          onChecked: hendleChecked,\n          labelClick: hendleClick\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)\n    }, void 0, false), /*#__PURE__*/_jsxDEV(C.Area, {\n      children: /*#__PURE__*/_jsxDEV(Menu, {\n        handleButtons: handleButtons\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"5B5creADs30R66wN/2t9GZl+br4=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/gean/Documentos/Personal_Projects/todolist/src/App.tsx"],"names":["useState","C","ListItem","AddArea","Menu","App","list","setList","handleAddTask","taskName","length","id","name","done","selectd","newList","push","hendleChecked","taskChecked","taskId","map","task","hendleClick","taskSelected","handleRemove","filter","handleRemoveAllDone","clearAll","handleButtons","item","index"],"mappings":"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","sourcesContent":["import { useState } from 'react';\nimport * as C from './App.styles';\nimport { Item } from './types/item';\nimport { ListItem } from './components/ListItem';\nimport { AddArea } from './components/AddArea';\nimport { Menu } from './components/Menu';\n\nconst App = () => {\n  const [list, setList] = useState<Item[]>([])\n\n  const handleAddTask = (taskName: string) => {\n    if (list.length === 0) { \n      setList([{\n        id: 1,\n        name: taskName,\n        done: false,\n        selectd: false,\n      }])\n    } else {\n      let newList = [...list];\n      newList.push({\n        id: list[list.length -1].id + 1,\n        name: taskName,\n        done: false,\n        selectd: false,\n      });\n      setList(newList)  \n    }\n  }\n\n  const hendleChecked = (taskChecked: boolean, taskId: number) => {\n    let newList = list.map((task) => {\n      if (task.id !== taskId) return task;\n      task.done = taskChecked;\n      return task;\n    });\n    setList(newList);\n  }\n\n  const hendleClick = (taskSelected: boolean, taskId: number) => {\n    let newList = list.map((task) => {\n      if (task.id !== taskId) {\n        task.selectd = false;\n        return task;\n      }\n      task.selectd = taskSelected;\n      return task;\n    });\n    setList(newList);\n  }\n\n  const handleRemove = () => {\n    let newList = list.filter((task) => task.selectd !== true);\n    setList(newList);\n  }\n\n  const handleRemoveAllDone = () => {\n    let newList = list.filter((task) => task.done !== true);\n    setList(newList);\n  }\n\n  const clearAll = () => {\n    setList([]);\n  }\n\n\n  const handleButtons = {\n    handleRemove,\n    handleRemoveAllDone,\n    clearAll,\n  }\n\n  return (\n    <C.Container>\n      <>\n        <C.Area>\n          <C.Header>Lista de tarefas</C.Header>\n\n          <AddArea onEnter={ handleAddTask } />\n\n          { list.map((item, index) => (\n            <ListItem key={ index } item={ item } onChecked={ hendleChecked } labelClick={ hendleClick } />\n          )) }\n        </C.Area>\n      </>\n\n      <C.Area>\n        <Menu handleButtons={ handleButtons } />\n      </C.Area>\n    </C.Container>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}