{"version":3,"sources":["App.styles.ts","components/ListItem/styles.ts","components/ListItem/index.tsx","components/AddArea/styles.ts","components/AddArea/index.tsx","components/Menu/style.ts","components/Menu/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Container","styled","div","Area","Header","h1","done","selected","ListItem","item","onChecked","labelClick","useState","setIsChecked","handleCheck","id","checked","selectd","type","onChange","e","target","onClick","onDoubleClick","name","AddArea","onEnter","inputText","setInputText","className","placeholder","value","onKeyUp","code","Menu","handleButtons","handleRemove","handleRemoveAllDone","handleClearAll","handleSaved","App","localSavadList","localStorage","getItem","savedList","JSON","parse","list","setList","hendleChecked","taskChecked","taskId","newList","map","task","hendleClick","taskSelected","filter","setItem","stringify","alert","taskName","length","push","index","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aae8c40d.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  background-color: #17181F;\n  color: #797A81;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const Area = styled.div`\n  margin: auto;\n  max-width: 980px;\n  width: 100%;\n  padding: 10px;\n`;\n\nexport const Header = styled.h1`\n  margin: 0;\n  padding: 0;\n  color: #FFF;\n  text-align: center;\n  border-bottom: 1px solid #444;\n  padding-bottom: 20px;\n`;","import styled from \"styled-components\";\n\ntype ContainerProps = {\n  done: boolean;\n  selected: boolean;\n}\n\nexport const Container = styled.div(({ done, selected }: ContainerProps) => (\n  `\n  display: fles;\n  background-color: #20212C;\n  padding: 10px;\n  border-radius: 10px;\n  margin: 5px 0;\n  align-items: center;\n\n  input {\n    width: 15px;\n    height: 15px;\n    margin-right: 5px;\n  }\n\n  label {\n    color: #eee;\n    user-select: none;\n    text-decoration: ${done ? 'line-through' : selected ? 'underline' : 'initial'};\n  }\n`\n));","import { useState } from 'react';\nimport * as C from './styles';\nimport { Item } from '../../types/item';\ntype Props = {\n  item: Item,\n  onChecked: (taskChecked: boolean, taskId: number) => void,\n  labelClick: (taskSelected: boolean, taskId: number) => void;\n}\n\nexport const ListItem = ({ item, onChecked, labelClick }: Props) => {\n  const [isChecked, setIsChecked] = useState(item.done);\n  // const [selected, setSelected] = useState(false);\n\n  const handleCheck = (id: number, checked: boolean) => {\n    onChecked(checked, id);\n    setIsChecked(checked);\n  }\n\n  const  hendleClick = () => { \n    labelClick(!item.selectd, item.id);\n  }\n  \n  return (\n    <C.Container done={item.done} selected={item.selectd} >\n      <input \n        type=\"checkbox\"\n        checked={ item.done }\n        onChange={ e => handleCheck(item.id, e.target.checked) }\n      />\n      <label\n        onClick={ hendleClick }\n        onDoubleClick={ () => handleCheck(item.id, !item.done) }\n      >\n        { item.name }\n      </label>\n    </C.Container>\n  );\n}","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  border: 1px solid #555;\n  border-radius: 15px;\n  padding: 10px;\n  margin: 20px 0;\n  display: flex;\n  align-items: center;\n\n  .image {\n    margin-right: 5px;\n    cursor: pointer;\n  }\n\n  input {\n    border: 0;\n    background: transparent;\n    outline: 0;\n    color: #eee;\n    font-size: 18px;\n    flex: 1;\n  }\n`;","import { useState, KeyboardEvent } from 'react';\nimport * as C from './styles';\n\ntype Props = {\n  onEnter: (taskName: string) => void;\n}\n\nexport const AddArea = ({ onEnter }: Props) => {\n  const [inputText, setInputText] = useState('');\n\n  const handleKeyUp = (e: KeyboardEvent) => {\n    if(e.code === 'Enter' && inputText !== '') {\n      onEnter(inputText);\n      setInputText('');\n    }\n  }\n\n  const handleClick = () => {\n    if (inputText !== '') {\n      onEnter(inputText);\n      setInputText('');\n    }\n  }\n  \n  return (\n    <C.Container>\n      <div\n        className=\"image\"\n        onClick={ handleClick }\n      >\n        âž•\n      </div>\n\n      <input \n        type=\"text\"\n        placeholder=\"Add a new task\"\n        value={inputText}\n        onChange={ ({ target }) => setInputText(target.value) }\n        onKeyUp={ handleKeyUp }\n      />\n    </C.Container>\n  );\n}","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  padding: 10px;\n  margin: 20px 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  .action__buttom {\n    background-color: #5555;\n    border: 1px solid #555;\n    border-radius: 15px;\n    color: #eee;\n    cursor: pointer;\n    font-size: 18px;\n    padding: 10px 20px;\n    margin: 0 5px;\n  }\n\n  .action__buttom:hover {\n    box-shadow: 0 0 0.6rem #333;\n  }\n`;","import * as C from './style';\n\ntype Props = {\n  handleButtons: { \n    handleRemove: () => void,\n    handleRemoveAllDone: () => void,\n    handleClearAll: () => void,\n    handleSaved: () => void,\n  },\n}\n\n\nexport const Menu = ({ handleButtons }: Props) => {\n  const { handleRemove, handleRemoveAllDone, handleClearAll, handleSaved } = handleButtons;\n\n  return (\n    <C.Container>\n      <button className=\"action__buttom\" onClick={ handleRemove }>Remove</button>\n      <button className=\"action__buttom\" onClick={ handleRemoveAllDone }>Remove All</button>\n      <button className=\"action__buttom\" onClick={ handleClearAll }>Clear All</button>\n      <button className=\"action__buttom\" onClick={ handleSaved }>Save</button>\n    </C.Container>\n  );\n}","import { useState } from 'react';\nimport * as C from './App.styles';\nimport { Item } from './types/item';\nimport { ListItem } from './components/ListItem';\nimport { AddArea } from './components/AddArea';\nimport { Menu } from './components/Menu';\n\nconst App = () => {\n  const localSavadList = localStorage.getItem('savedList');\n  const savedList = JSON.parse(localSavadList || '[]');\n\n  const [list, setList] = useState<Item[]>(savedList);\n\n  const handleAddTask = (taskName: string) => {\n    if (list.length === 0) { \n      setList([{\n        id: 1,\n        name: taskName,\n        done: false,\n        selectd: false,\n      }])\n    } else {\n      let newList = [...list];\n      newList.push({\n        id: list[list.length -1].id + 1,\n        name: taskName,\n        done: false,\n        selectd: false,\n      });\n      setList(newList)  \n    }\n  }\n\n  const hendleChecked = (taskChecked: boolean, taskId: number) => {\n    let newList = list.map((task) => {\n      if (task.id !== taskId) return task;\n      task.done = taskChecked;\n      return task;\n    });\n    setList(newList);\n  }\n\n  const hendleClick = (taskSelected: boolean, taskId: number) => {\n    let newList = list.map((task) => {\n      if (task.id !== taskId) {\n        task.selectd = false;\n        return task;\n      }\n      task.selectd = taskSelected;\n      return task;\n    });\n    setList(newList);\n  }\n\n  const handleRemove = () => {\n    let newList = list.filter((task) => task.selectd !== true);\n    setList(newList);\n  }\n\n  const handleRemoveAllDone = () => {\n    let newList = list.filter((task) => task.done !== true);\n    setList(newList);\n  }\n\n  const handleClearAll = () => {\n    setList([]);\n  }\n\n  const handleSaved = () => {\n    localStorage.setItem('savedList', JSON.stringify(list));\n    alert('lista salva');\n  }\n\n\n  const handleButtons = {\n    handleRemove,\n    handleRemoveAllDone,\n    handleClearAll,\n    handleSaved,\n  }\n\n  return (\n    <C.Container>\n      <>\n        <C.Area>\n          <C.Header>Lista de tarefas</C.Header>\n\n          <AddArea onEnter={ handleAddTask } />\n\n          { list.map((item, index) => (\n            <ListItem key={ index } item={ item } onChecked={ hendleChecked } labelClick={ hendleClick } />\n          )) }\n        </C.Area>\n      </>\n\n      <C.Area>\n        <Menu handleButtons={ handleButtons } />\n      </C.Area>\n    </C.Container>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}